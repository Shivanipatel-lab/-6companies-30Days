//ADOBE

1.Find a continuous sub-array which adds to a given number S.

CODE:

vector<int> subarraySum(int arr[], int n, long long s)
    {
        // Your code here
        int low=0,high=n-1,sum=0,i=0;
        while(low<=high)
        {
            sum+=arr[i];
            if(sum==s)
            {
                return {low+1,i+1};
            }
            else if(sum>s)
            {
                while(sum>s)
                {
                    sum-=arr[low];
                    low++;
                    if(sum==s)
                    {
                        return {low+1,i+1};
                    }
                }
            }
            i++;
        }
       return {-1}; 
    }

2.Find the length of the Longest Arithmetic Progression (LLAP) in it.

CODE:

int lengthOfLongestAP(int A[], int n) {
       
       
       int ans=0;
       if(n==1)
       return 1;
       vector<vector<int>>dp(n,vector<int>(10001));
       for(int i=0;i<n;i++)
       {
           for(int j=i+1;j<n;j++)
           {
               int diff=A[j]-A[i];
               dp[j][diff]=max(dp[i][diff]+1,2);
               ans=max(ans,dp[j][diff]);
           }
       }
       return ans;
    }

3.Number of distinct Words with k maximum contiguous vowels(Joe and his Dictionary Problem)

CODE:

#define ll long long int
    const int MOD=1e9+7;
    int kvowelwords(int N, int K) {
        // Write Your Code here
        vector<vector<ll>> dp(N+1, vector<ll>(K+1));
        for(int i=0;i<=N;i++)
        {
            for(int j=0;j<=K;j++)
            {
                if(i==0)
                {
                    dp[i][j]=1;
                }
                else
                {
                    dp[i][j]=dp[i-1][K]*21%MOD;
                
                if(j>0)
                
                    dp[i][j]=(dp[i][j]+dp[i-1][j-1]*5%MOD)%MOD;
                }
            }
        }
        return dp[N][K];
    }

4.Partition Equal Subset Sum

CODE:

bool subsetSum(int arr[],int sum,int n){
      bool t[n+1][sum+1];
      for(int i=0;i<n+1;i++){
          for(int j=0;j<sum+1;j++){
              if(i==0)
                t[i][j]=false;
              if(j==0)
                t[i][j]=true;
          }
      }
      
      for(int i=1;i<n+1;i++){
          for(int j=1;j<sum+1;j++){
              if(arr[i-1]<=j){
                  t[i][j]=t[i-1][j-arr[i-1]] || t[i-1][j];
              } else {
                  t[i][j]=t[i-1][j];
              }
          }
      }
      return t[n][sum];
  }
   int equalPartition(int N, int arr[])
   {
      int sum = accumulate(arr,arr+N,0);
      if(sum%2==0){
          return subsetSum(arr,sum/2,N);
      }
      return 0;
            
    }
5.Total number of ways n can be expressed as sum of xth power of unique natural numbers

CODE:

long long int dp[1001][1001];
    long long int find(int i,int sum,int limit,int x,int n){
        if(i > limit+1) return 0; // as we can't miss the ceil of limit
        
        else if(sum > n) return 0;
        
        else if(dp[i][sum] != -1) return dp[i][sum];
        
        else if(sum == n)   return 1;
        
        long long int withPowSum = find(i+1,sum + pow(i,x),limit,x,n);            
        
        long long int withoutPowSum = find(i+1,sum,limit,x,n);
        
        return dp[i][sum] = withPowSum + withoutPowSum;
    }
    int numOfWays(int n, int x)
    {
        // code here
        int limit = pow(n,1.0/x);
        memset(dp,-1,sizeof dp);
        return find(1,0,limit,x,n);
    }

6.Generate all combinations of well-formed(balanced) parentheses.

CODE:

 void solve(vector<string>&vec,string o,int open,int close)
    {
        if(open==0 && close==0)
        {
            vec.push_back(o);
            return;
        }
        if(open!=0)
        {
            string op1=o;
            op1.push_back('(');
            solve(vec,op1,open-1,close);
        }
        if(close>open)
        {
            string op1=o;
            op1.push_back(')');
            solve(vec,op1,open,close-1);
        }
    }
    vector<string> AllParenthesis(int n) 
    {
        // Your code goes here 
        vector<string>vec;
        string o;
        int open=n;
        int close=n;
        solve(vec,o,open,close);
        return vec;
    }

7.Pots of Gold Game (Similar to Covid and Beds problem)

CODE:

int solve(vector<int>A,vector<vector<int>>&dp,int s,int e)
    {
        if(s>e)
        return dp[s][e]=0;
        if(s==e)
        return dp[s][e]=A[s];
        if(dp[s][e]!=-1)
        return dp[s][e];
        
        int left=A[s]+min(solve(A,dp,s+2,e),solve(A,dp,s+1,e-1));
        int right=A[e]+min(solve(A,dp,s+1,e-1),solve(A,dp,s,e-2));
        return dp[s][e]=max(left,right);
        
    }
    int maxCoins(vector<int>&A,int n)
    {
	    //Write your code here
	    
	     vector<vector<int>> dp(n+1, vector<int>(n+1, -1));
         return solve(A, dp, 0, n-1);
    }

8.ATOI 

CODE:

 int atoi(string str) {
        //Your code here
        int res=0;
        int i=0;
        int len=str.size();
        int flag=0;
        while(i<len)
        {
            if(i==0 and str[i]=='-')
            {
                flag=1;
                i++;
                continue;
            }
        
        if(str[i]<'0' || str[i]>'9')
        return -1;
        int t=str[i]-'0';
        res=res*10+t;
        i++;
        }
        return flag==1?(-1*res):res;
    }

9. Smallest palindromic number greater than N using the same set of digits as in N.

CODE:

string nextPalin(string N) { 
        //complete the function here
        
        int n=N.size();
        if(n<=3) return "-1";
        string half = N.substr(0,n/2);
        if( next_permutation( half.begin() , half.end() ) )
        {
            string ans=half;
            if(n&1)
            {
                ans+=N[n/2];
            }
            reverse(half.begin() , half.end());
            ans+=half;
            return ans;
        }
        return "-1";
    }

10.Elections

CODE:

vector<string> winner(string arr[],int n)
    {
        // Your code here
        // Return the string containing the name and an integer
        // representing the number of votes the winning candidate got
        map<string,int>mp;
        int maxi=0;
        string s;
        vector<string>v;
        for(int i=0;i<n;i++)
        mp[arr[i]]++;
        for(auto it:mp)
        {
            if(it.second>maxi)
            {
                maxi=it.second;
                s=it.first;
            }
        }
        v.push_back(s);
        v.push_back(to_string(maxi));
        return v;
    }

11.String Amendment

CODE:

string amendSentence (string s)
    {
        // your code here
         string ans="";
       
       int len=s.length();
       int i=0;
       
       while(i<len)
       {
           if(i==0 || isupper(s[i]))
           {
               ans+=tolower(s[i]);
               i++;
               while(i<len && islower(s[i]))
               {
                   ans+=s[i];
                   i++;
               }
               ans+=" ";
           }
       }
       
       ans.pop_back();
       return ans;
    }

12.Leaders in Array

CODE:

    vector<int> leaders(int a[], int n){
        // Code here
        vector<int> v;
       int leader=a[n-1];
       v.push_back(leader);
       for(int i=n-2;i>=0;i--){
           if(a[i]>=leader){
               leader=a[i];
               v.push_back(leader); 
           }
       }
      
       sort(v.begin(),v.end(), greater<int>());
       return v;
    }

13.Minimum operations to convert array A to B 

CODE:

// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
//User function Template for C++

class Solution {
  public:
    
    
    int solve(vector<int>vec){
        vector<int>res;
        for(int i=0; i<vec.size(); i++){
            auto it = lower_bound(res.begin(),res.end(),vec[i]);
            if(it == res.end()){
                res.push_back(vec[i]);
            }
            else{
                *it = vec[i];
            }
        }
        return res.size();
    }
    int minInsAndDel(int A[], int B[], int N, int M) {
        // code here
        
         unordered_map<int,int>mp;
        for(int i=0; i<M; i++){
            mp[B[i]]++;
        }
        vector<int>vec;
        for(int i=0; i<N; i++){
            if(mp.find(A[i]) != mp.end()){
                vec.push_back(A[i]);
            }
        }
        return (N+M) - 2*solve(vec);
    }
};

// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int N,M;
        cin>>N>>M;
        
        int A[N], B[M];
        for(int i=0; i<N; i++)
            cin>>A[i];
        for(int i=0; i<M; i++)
            cin>>B[i];

        Solution ob;
        cout << ob.minInsAndDel(A,B,N,M) << endl;
    }
    return 0;
}  // } Driver Code Ends

14.Smallest range in K lists 

CODE:

// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;
#define N 1000


 // } Driver Code Ends
// you are required to complete this function 
// function should print the required range
class Solution{
    public:
    pair<int,int> findSmallestRange(int KSortedArray[][N], int n, int k)
    {
          //code here
          
          set<pair<int, pair<int, int>>> s;
       
       pair<int, int> res{0, INT_MAX};
       
       for(size_t i = 0; i < k; ++i){
           s.insert( {KSortedArray[i][0], {i, 0}} );
       }
       
       while( !s.empty() ){
           // Get the min and max elements from ordered set now
           int minVal = s.begin()->first; 
           int maxVal = s.rbegin()->first;
           if( res.second - res.first > maxVal - minVal )
           {
               res.first = minVal;
               res.second = maxVal;
           } 
             int r = s.begin()->second.first;
           int c = s.begin()->second.second;
           s.erase(s.begin());
           if( c + 1 == n )
               break;
           s.insert( {KSortedArray[r][c+1], {r, c+1}} );
       }
       return res;
    }
};

// { Driver Code Starts.
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n, k;
        cin>>n>>k;
        int arr[N][N];
        pair<int,int> rangee;
        for(int i=0; i<k; i++)
            for(int j=0; j<n; j++)
                cin>>arr[i][j];
        Solution obj;
	    rangee = obj.findSmallestRange(arr, n, k);
	    cout<<rangee.first<<" "<<rangee.second<<"\n";
    }   
	return 0;
}

  // } Driver Code Ends