Arsh Microsoft Sheet :

1.Divide an array into two sets S1 and S2 such that the absolute difference between their sums is minimum and find the minimum difference

CODE:

int minDifference(int arr[], int n)  { 
	    // Your code goes here
	     int sum = 0;
       for (int i = 0; i < n; i++)
       {
           sum += arr[i];
       }
       int orgSum = sum;
       sum = sum / 2;
       bool dp[n + 1][sum + 1];
       for (int i = 0; i <= n; i++)
       {
           for (int j = 0; j <= sum; j++)
           {
               if (j == 0)
               {
                   dp[i][j] = true;
               }
               else if (i == 0)
               {
                   dp[i][j] = false;
               }
               else
               {
                   if (arr[i - 1] > j)
                   {
                       dp[i][j] = dp[i - 1][j];
                   }
                   else
                   {
                       dp[i][j] = dp[i - 1][j] || dp[i - 1][j - arr[i - 1]];
                   }
               }
           }
       }
       int maxi = INT_MIN;
       for (int i = 0; i <= sum; i++)
       {
           if (dp[n][i])
           
           {
               maxi= max(maxi, i);
           }
           
       }
       return orgSum-2*maxi;
	} 
2.Prerequisite Tasks (Similar to Question of Modern Park)

CODE:

bool isPossible(int N, vector<pair<int, int> >& prerequisites) {
	    // Code here
	    vector<int>adj[N];
	    for(auto it: prerequisites)
	    {
	        adj[it.first].push_back(it.second);
	    }
	    int cnt=0;
	    vector<int>indegree(N,0);
	    for(int i=0;i<indegree.size();i++)
	    {
	        for(auto it:adj[i])
	        {
	            indegree[it]++;
	        }
	    }
	    queue<int>q;
	    for(int i=0;i<N;i++)
	    {
	        if(indegree[i]==0)
	        q.push(i);
	    }
	    while(!q.empty())
	    {
	        int node=q.front();
	        q.pop();
	        cnt++;
	        for(auto it:adj[node])
	        {
	            indegree[it]--;
	            if(indegree[it]==0)
	            q.push(it);
	        }
	    }
	    if(cnt==N)
	    return true;
	    return false;
	}
3.Rotate by 90 degree

CODE:

void rotate(vector<vector<int> >& matrix)
{
    // Your code goes here
    
    int row=matrix.size();
    int col=matrix[0].size();
    for(int i=0;i<matrix.size();i++)
    {
    reverse(matrix[i].begin(),matrix[i].end());
    }
    for(int i=0;i<matrix.size();i++)
    {
        for(int j=i;j<matrix.size();j++)
        
            swap(matrix[i][j],matrix[j][i]);
        
    }
    
}
4. Given a matrix of size r*c. Traverse the matrix in spiral form. 

CODE:

 vector<int> spirallyTraverse(vector<vector<int> > matrix, int r, int c) 
    {
        // code here 
        
         vector<int> ans;
       int dir=0;
       int left=0,right=c-1,top=0,down=r-1;
       while(left<=right&&top<=down){
           if(dir==0){
               for(int i=left;i<=right;i++)
               ans.push_back(matrix[top][i]);
               top+=1;
           }
           else if(dir==1){
               for(int i=top;i<=down;i++)
               ans.push_back(matrix[i][right]);
               right-=1;
           }
           else if(dir==2){
               for(int i=right;i>=left;i--)
               ans.push_back(matrix[down][i]);
               down-=1;
           }
           else if(dir==3){
               for(int i=down;i>=top;i--)
                   ans.push_back(matrix[i][left]);
                   left+=1;
           }
           dir=(dir+1)%4;
       }
       return ans;
    }
5. Stock span problem

CODE:

vector <int> calculateSpan(int price[], int n)
    {
       // Your code here
       vector<int>res(n,1);
       stack<int>s;
       s.push(0);
       for(int i=1;i<n;i++)
       {
           while(!s.empty() and price[s.top()]<=price[i])
           {
               s.pop();
           }
           int ans=(s.empty())?i+1:i-s.top();
           res[i]=ans;
           s.push(i);
       }
       return res;
    }
6.Possible Words From Phone Digits

CODE:

// { Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
#include <string>

using namespace std;


 // } Driver Code Ends
//User function Template for C++

class Solution
{
    
    private:
    unordered_map<int,vector<char>>m;
    public:
    //Function to find list of all words possible by pressing given numbers.
    Solution()
    {
        m[2]={'a','b','c'};
        m[3]={'d','e','f'};
        m[4]={'g','h','i'};
        m[5]={'j','k','l'};
        m[6]={'m','n','o'};
        m[7]={'p','q','r','s'};
        m[8]={'t','u','v'};
        m[9]={'w','x','y','z'};
    }
    void solve(int ind,int a[],int n,vector<string>&res,string str)
    {
        if(ind==n)
        {
            res.push_back(str);
            return;
        }
        for(int i=0;i<m[a[ind]].size();i++)
        {
            solve(ind+1,a,n,res,str+m[a[ind]][i]);
        }
    }
    vector<string> possibleWords(int a[], int N)
    {
        //Your code here
        vector<string>res;
        string str="";
        solve(0,a,N,res,str);
        return res;
    }
};


// { Driver Code Starts.

int main() {
  
	int T;
	
	cin >> T; //testcases
	
	while(T--){ //while testcases exist
	   int N;
	    
	   cin >> N; //input size of array
	   
	   int a[N]; //declare the array
	   
	   for(int i =0;i<N;i++){
	       cin >> a[i]; //input the elements of array that are keys to be pressed
	   }
	   
	   Solution obj;
	   
	  vector <string> res = obj.possibleWords(a,N);
	  for (string i : res) cout << i << " ";
	   cout << endl;
	}
	
	return 0;
}  // } Driver Code Ends
7.Unit Area of largest region of 1's 

CODE:

 int countArea(vector<vector<int>>&grid,int x,int y)
    {
        if(x<0||y<0 || x>=grid.size() || y>=grid[0].size())
        return 0;
        if (!grid[x][y]) return 0;
        grid[x][y] = 0;
        return 1 + countArea(grid, x - 1, y) 
                 + countArea(grid, x + 1, y)
                 + countArea(grid, x, y - 1)
                 + countArea(grid, x, y + 1)
                 + countArea(grid, x-1,y-1)
                 + countArea(grid, x+1, y + 1)
                 + countArea(grid, x+1,y-1)
                 + countArea(grid, x-1,y+1);
    }
    int findMaxArea(vector<vector<int>>& grid) {
        // Code here
        int max_area = 0;
        for (int i = 0; i < grid.size(); ++i) {
            for (int j = 0; j < grid[0].size(); ++j) {
                if (grid[i][j])
                    max_area = std::max(countArea(grid, i, j), max_area);
            }
        }
        
        return max_area;
        
    }
8.Connect Nodes at Same Level

CODE:

void connect(Node *root)
    {
       // Your Code Here
       if(root==NULL)
       return;
       queue<Node*>q;
       q.push(root);
       while(!q.empty())
       {
           Node* prev=NULL;
           Node* curr=NULL;
           int n=q.size();
           for(int i=0;i<n;i++)
           {
               curr=q.front();
               q.pop();
               if(prev)
               prev->nextRight=curr;
               if(curr->left)
               q.push(curr->left);
               if(curr->right)
               q.push(curr->right);
               prev=curr;
           }
       }
       return;
    }   
9.Count Number of SubTrees having given Sum 

CODE:

int c=0;
int countTree(Node *root,int X)
{
    if(root==NULL)
    {
        return 0;
    }
    int l=countTree(root->left,X);
    int r=countTree(root->right,X);
    int sum=root->data+l+r;
    if(sum==X)
    {
        c++;
    }
    return sum;
}
int countSubtreesWithSumX(Node* root, int X)
{
	// Code here
	
	 c=0;
	int ans=countTree(root,X);
	return c;
	
}
10.Stickler Thief (Similar to Alibaba and Thiefes Question) 

CODE:

  {
        // Your code here
        if(n==1)
        return arr[0];
        if(n==2)
        return max(arr[0],arr[1]);
        for(int i=2;i<n;i++)
        {
            if(i==2)
            {
              arr[i]+=arr[i-2];
            }
            else{
                arr[i]+=max(arr[i-2],arr[i-3]);
            }
        }
        return max(arr[n-1],arr[n-2]);
    }

11.Generate and print all binary numbers with decimal values from 1 to N.  

CODE:

vector<string> generate(int N)
{
	// Your code here
	queue<string>q;
	q.push("1");
	vector<string>res;
	while(N--)
	{
	    string s1=q.front();
	    q.pop();
	    //string s2=s1;
	    q.push(s1+"0");
	    q.push(s1+"1");
	    res.push_back(s1);
	}
	return res;
}
12.Find all the unique quadruple from the given array that sums up to the given number.

CODE:

vector<vector<int> > fourSum(vector<int> &arr, int k) {
        // Your code goes here
       
        vector<vector<int>>result;
        int n=arr.size();
         sort(arr.begin(),arr.end());
       
        for(int i=0;i<=n-3;i++)
        {
            if(i > 0&&arr[i]==arr[i-1])
            continue;
            for(int j=i+1;j<n-2;j++)
            {
            
                    if( j>i+1&&arr[j]==arr[j-1])
                    continue;
                    int l=j+1;
                    int r=n-1;
                    while(l<r)
                    {
                        int total_sum=arr[i]+arr[j]+arr[l]+arr[r];
                        if(total_sum==k)
                        {
                            result.push_back({arr[i],arr[j],arr[l],arr[r]});
                            
                            do{
                                r--;
                            }
                            while(arr[r]==arr[r+1]&&l<r);
                        }
                    }
                    else if(total_sum<k)
                    l++;
                    else
                    r--;
                    
                }
            }
        }

            return result;
        }
13.Given a Graph of V vertices and E edges and another edge(c - d), the task is to find if the given edge is a Bridge. i.e., removing the edge disconnects the graph.

CODE:

 void dfs(int node,vector<int>&vis,vector<int>adj[],int c,int d)
    {
        vis[node]=1;
        for(auto it:adj[node])
        {
            if((node==c and it==d)||node==d and it==c)
            continue;
            if(!vis[it])
            dfs(it,vis,adj,c,d);
        }
    }
    int isBridge(int V, vector<int> adj[], int c, int d) 
    {
        // Code here
        vector<int>vis(V,0);
        dfs(c,vis,adj,c,d);
        if(!vis[d])
        return 1;
        return 0;
        
    }
14.Given a destination D , find the minimum number of steps required to reach that destination.

CODE:

int minSteps(int D){
        // code here
       int steps = 0, sum = 0;
        while(true){
            sum = sum + steps;
            steps++;
            if(sum == D){
                return steps-1;
                break;
            }
            if(sum > D and (sum-D)%2 == 0){
                return steps-1;
                break;
            }
        }
        return 0;
    }
15.Find the order of characters in the alien language.

CODE:

void dfs(int node,vector<vector<int>>&graph,vector<int>&vis,string &res)
    {
        vis[node]=1;
        for(auto it:graph[node])
        {
            if(!vis[it])
            {
                dfs(it,graph,vis,res);
            }
        }
        char ch=node+'a';
        res=ch+res;
    }
    string findOrder(string dict[], int N, int K) {
        //code here
        vector<vector<int>>graph(K);
        for(int i=0;i<N-1;i++)
        {
            string w1=dict[i];
            string w2=dict[i+1];
            
            for(int j=0;j<min(w1.size(),w2.size());j++)
            {
                if(w1[j]!=w2[j])
                {
                    graph[w1[j]-'a'].push_back(w2[j]-'a');
                    break;
                }
            }
        }
        vector<int>vis(K,0);
        string res="";
        for(int i=0;i<K;i++)
        {
            if(!vis[i])
            {
                dfs(i,graph,vis,res);
            }
        }
        return res;
    }